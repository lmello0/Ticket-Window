services:
  frontdoor:
    hostname: frontdoor
    image: lmello/ticket-window-frontdoor:latest
    ports:
      - 8080:8080
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully

  dashboard:
    hostname: dashboard
    image: lmello/ticket-window-dashboard:latest
    ports:
      - 8081:8080
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    env_file:
      - .env

  attendant:
    hostname: attendant
    image: lmello/ticket-window-attendant:latest
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    env_file:
      - .env
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  postgres:
    hostname: postgres
    image: postgres
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 80s

  zookeeper:
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    hostname: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c"]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic unprocessed_customers --partitions 3
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic processed_customers
      
      echo -e 'Successfully created the following topics'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

volumes:
  postgres:
